import { Repository, getRepository } from 'typeorm';
import { typeorm } from '@seidor-cloud-produtos/lib-seidor-common';

import <%= props.nameCamelCaseUpperFirst %> from '../entities/<%= props.nameCamelCaseUpperFirst %>';
import I<%= props.nameCamelCaseUpperFirst %>DTO from '../../../dtos/I<%= props.nameCamelCaseUpperFirst %>DTO';
import I<%= props.nameCamelCaseUpperFirst %>Repository from '../../../repositories/I<%= props.nameCamelCaseUpperFirst %>RepositoryDTO';

export default class <%= props.nameCamelCaseUpperFirst %>Repository implements I<%= props.nameCamelCaseUpperFirst %>Repository {
    private ormRepository: Repository<<%= props.nameCamelCaseUpperFirst %>>;

    constructor() {
        this.ormRepository = getRepository(<%= props.nameCamelCaseUpperFirst %>);
    }

    public async create(<%= props.nameCamelCase %>Data: I<%= props.nameCamelCaseUpperFirst %>DTO): Promise<<%= props.nameCamelCaseUpperFirst %>> {
        const <%= props.nameCamelCase %> = this.ormRepository.create(<%= props.nameCamelCase %>Data);

        return this.ormRepository.save(<%= props.nameCamelCase %>);
    }

    public async findById(id: string): Promise<<%= props.nameCamelCaseUpperFirst %> | undefined> {
        return this.ormRepository.findOne({ where: { id } });
    }

    public async update(updates: <%= props.nameCamelCaseUpperFirst %>): Promise<<%= props.nameCamelCaseUpperFirst %>> {
        return this.ormRepository.save(updates);
    }

    public async getAllWithPagination(
        options: typeorm.OptionsTypeOrmGetAllWithPagination,
    ): Promise<{ data: <%= props.nameCamelCaseUpperFirst %>[]; count: number }> {
        const [data, count] = await this.ormRepository.findAndCount(options);

        return { data, count };
    }

    public async getAllWithoutPagination(
        options: typeorm.OptionsTypeOrmGetAllWithoutPagination,
    ): Promise<<%= props.nameCamelCaseUpperFirst %>[]> {
        return this.ormRepository.find(options);
    }

    public async remove(id: string): Promise<void> {
        await this.ormRepository.delete(id);
    }
}
