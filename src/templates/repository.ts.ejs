import { Repository, getRepository } from 'typeorm';
import {
    OptionsTypeOrmGetAll,
    GetAllWithoutPagination,
} from '@seidor-cloud-produtos/lib-seidor-common/dist/packages/typeorm/lib/interfaces';

import <%= props.nameCamelCaseUpperFirst %> from '../database/entities/<%= props.nameCamelCaseUpperFirst %>';
import { <%= props.nameCamelCaseUpperFirst %>Interface } from '../interfaces/<%= props.nameCamelCase %>';
import I<%= props.nameCamelCaseUpperFirst %>Repository from '../interfaces/repositories/I<%= props.nameCamelCaseUpperFirst %>Repository';

export default class <%= props.nameCamelCaseUpperFirst %>Repository implements I<%= props.nameCamelCaseUpperFirst %>Repository {
    private ormRepository: Repository<<%= props.nameCamelCaseUpperFirst %>>;

    constructor() {
        this.ormRepository = getRepository(<%= props.nameCamelCaseUpperFirst %>);
    }

    public async createAndSave(
        <%= props.nameCamelCase %>Data: <%= props.nameCamelCaseUpperFirst %>Interface,
    ): Promise<<%= props.nameCamelCaseUpperFirst %>> {
        const <%= props.nameCamelCase %> = this.ormRepository.create(<%= props.nameCamelCase %>Data);

        return this.ormRepository.save(<%= props.nameCamelCase %>);
    }

    public async findById(
        id: string<% if (props.tenantid) { %>, tenantid: string<% }%>): Promise<<%= props.nameCamelCaseUpperFirst %> | undefined> {
        return this.ormRepository.findOne({ where: { id<% if (props.tenantid) { %>, tenantid<% }%> } });
    }

    public async getAllWithPagination(
        options: OptionsTypeOrmGetAll,
    ): Promise<{ data: <%= props.nameCamelCaseUpperFirst %>[]; count: number }> {
        const [data, count] = await this.ormRepository.findAndCount(options);

        return { data, count };
    }

    public async getAllWithoutPagination(
        options: GetAllWithoutPagination,
    ): Promise<<%= props.nameCamelCaseUpperFirst %>[]> {
        return this.ormRepository.find(options);
    }
}
