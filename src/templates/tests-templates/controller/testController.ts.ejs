import sinon from 'sinon';
import request from 'supertest';
import { container } from 'tsyringe';
<% if (props.tenantid) { %>import { uuid } from 'uuidv4';<% }%>
import { validation } from '@seidor-cloud-produtos/lib-seidor-common';

import app from '../../app';
import <%= props.nameCamelCaseUpperFirst %>Service from '../../services/<%= props.nameCamelCaseUpperFirst %>Service';
import <%= props.nameCamelCaseUpperFirst %>Builder from '../testBuilders/<%= props.nameCamelCaseUpperFirst %>Builder';

describe('<%= props.nameCamelCaseUpperFirst %> Route context', () => {
    let <%= props.nameCamelCase %>ServiceSpy: sinon.SinonStubbedInstance<<%= props.nameCamelCaseUpperFirst %>Service>;

    beforeEach(() => {
        sinon.restore();
        <%= props.nameCamelCase %>ServiceSpy = sinon.createStubInstance(<%= props.nameCamelCaseUpperFirst %>Service);
    });

    it('should be call controller with <%= props.nameCamelCase %> data and returns status 201', async () => {
        const tenantid = uuid();

        const <%= props.nameCamelCase %>Build = new <%= props.nameCamelCaseUpperFirst %>Builder()<% if (props.tenantid) { %>
            .withTenantId(uuid())<% }%><% for(let i=0; i<props.properties.original.strings.length; i++) { %>
            .with<%= props.properties.camelCaseUpperFirst.strings[i] %>('<%= props.properties.original.strings[i] %>')<%}; %><% for(let i=0; i<props.properties.original.numbers.length; i++) { %>
            .with<%= props.properties.camelCaseUpperFirst.numbers[i] %>(123)<%}; %>
            .build();

        const userAndTenantId = {
            username: 'Teste',
            useremail: 'teste@teste.com.br',
            tenantid,
        };

        <%= props.nameCamelCase %>ServiceSpy.create.resolves(<any><%= props.nameCamelCase %>Build);
        sinon.stub(container, 'resolve').returns(<%= props.nameCamelCase %>ServiceSpy);

        const response = await request(app)
            .post('/api/<%= props.tableName %>')
            .send(<%= props.nameCamelCase %>Build)
            .set(userAndTenantId);

        expect(response.status).toBe(201);
        expect(response.body.id).toBe(<%= props.nameCamelCase %>Build.id);
    });


});
