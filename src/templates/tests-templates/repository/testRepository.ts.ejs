<% if (props.tenantid) { %>import { uuid } from 'uuidv4';<% }%>

import connect from '../../database/connection/connection';
import { <%= props.nameCamelCaseUpperFirst %>Interface } from '../../interfaces/<%= props.nameCamelCase %>';
import <%= props.nameCamelCaseUpperFirst %>Repository from '../../repositories/<%= props.nameCamelCaseUpperFirst %>Repository';
import { deleteFileDatabase } from '../deleteFileDatabase';
import <%= props.nameCamelCaseUpperFirst %>Builder from '../testBuilders/<%= props.nameCamelCaseUpperFirst %>Builder';
import makeSut from './makeSuts/<%= props.nameCamelCase %>';

describe('<%= props.nameCamelCaseUpperFirst %> Repository context', () => {
    let <%= props.nameCamelCase %>Repository: <%= props.nameCamelCaseUpperFirst %>Repository;

    const context = `${Date.now()}`;

    beforeAll(async () => {
        await connect(true, context);
        <%= props.nameCamelCase %>Repository = new <%= props.nameCamelCaseUpperFirst %>Repository();
    });

    afterAll(async () => {
        await deleteFileDatabase(context);
    });

    it('should be able to insert a new <%= props.nameCamelCaseUpperFirst %>', async () => {
        const <%= props.nameCamelCase %>Build = new <%= props.nameCamelCaseUpperFirst %>Builder()<% if (props.tenantid) { %>
            .withTenantId(uuid())<% }%><% for(let i=0; i<props.properties.original.strings.length; i++) { %>
            .with<%= props.properties.camelCaseUpperFirst.strings[i] %>('<%= props.properties.original.strings[i] %>')<%}; %><% for(let i=0; i<props.properties.original.numbers.length; i++) { %>
            .with<%= props.properties.camelCaseUpperFirst.numbers[i] %>(123)<%}; %>
            .withCreatedByName('Create')
            .withCreatedByEmail('test@create.com')
            .withUpdatedByName('Update')
            .withUpdatedByEmail('test@update.com.br')
            .build();

        const {
            id,
            active,
            created_at,
            updated_at,
            inactivation_date,
            ...entityProps
        } = await <%= props.nameCamelCase %>Repository.createAndSave(<%= props.nameCamelCase %>Build as <%= props.nameCamelCaseUpperFirst %>Interface);

        expect(entityProps).toEqual(<%= props.nameCamelCase %>Build);
        expect(active).toBe(true);
        expect(id).not.toBeUndefined();
        expect(inactivation_date).not.toBeUndefined();
        expect(created_at).not.toBeUndefined();
        expect(updated_at).not.toBeUndefined();
    });

    it('Should be able to find a <%= props.nameCamelCaseUpperFirst %>', async () => {
        const sut = await makeSut();

        const <%= props.nameCamelCase %>Finded = await <%= props.nameCamelCase %>Repository.findById(sut.id<% if (props.tenantid) { %>, sut.tenantid<% }%>);

        expect(<%= props.nameCamelCase %>Finded).toEqual(sut);
    });

    it('Should be able to update a <%= props.nameCamelCaseUpperFirst %>', async () => {
        const sut = await makeSut();

        const updates: <%= props.nameCamelCaseUpperFirst %>Interface = {
            ...sut,
            active: false,<% for(let i=0; i<props.properties.original.strings.length; i++) { %>
            <%= props.properties.original.strings[i] %>: 'update <%= props.properties.original.strings[i] %>',<%}; %><% for(let i=0; i<props.properties.original.numbers.length; i++) { %>
            <%= props.properties.original.numbers[i] %>: 999,<%}; %>
        };

        const <%= props.nameCamelCase %>Updated = await <%= props.nameCamelCase %>Repository.createAndSave(updates);

        <% if (props.tenantid) { %>expect(<%= props.nameCamelCase %>Updated.tenantid).toBe(sut.tenantid);<% }%>
        expect(<%= props.nameCamelCase %>Updated.id).toBe(sut.id);
        expect(<%= props.nameCamelCase %>Updated.active).toBe(false);<% for(let i=0; i<props.properties.original.strings.length; i++) { %>
        expect(<%= props.nameCamelCase %>Updated.<%= props.properties.original.strings[i] %>).toBe('update <%= props.properties.original.strings[i] %>');<%}; %><% for(let i=0; i<props.properties.original.numbers.length; i++) { %>
        expect(<%= props.nameCamelCase %>Updated.<%= props.properties.original.numbers[i] %>).toBe(999);<%}; %>
    });

    it('Should return a paginated list of <%= props.nameCamelCaseUpperFirst %> with inactivation', async () => {
        const sut = await makeSut({ active: false });

        const res = await <%= props.nameCamelCase %>Repository.getAllWithPagination(<any>{});

        expect(
            res.data.findIndex(<%= props.nameCamelCase %> => <%= props.nameCamelCase %>.id === sut.id),
        ).toBeGreaterThanOrEqual(0);
        expect(res.count).toBeGreaterThan(0);
    });

    it('Should return a list of <%= props.nameCamelCaseUpperFirst %> with inactivation', async () => {
        const sut = await makeSut({ active: false });

        const res = await <%= props.nameCamelCase %>Repository.getAllWithoutPagination(<any>{});

        expect(res.findIndex(<%= props.nameCamelCase %> => <%= props.nameCamelCase %>.id === sut.id)).toBeGreaterThanOrEqual(0);
    });
});
