import { uuid } from 'uuidv4';

import <%= props.nameCamelCaseUpperFirst %>Service from '../../services/<%= props.nameCamelCaseUpperFirst %>Service';
import <%= props.nameCamelCaseUpperFirst %>Builder from '../testBuilders/<%= props.nameCamelCaseUpperFirst %>Builder';
import { make<%= props.nameCamelCaseUpperFirst %>Service } from './makeInstance/<%= props.nameCamelCase %>';

describe('<%= props.nameCamelCaseUpperFirst %> Movement Service', () => {
    let <%= props.nameCamelCase %>Service: <%= props.nameCamelCaseUpperFirst %>Service;

    beforeAll(async () => {
        <%= props.nameCamelCase %>Service = make<%= props.nameCamelCaseUpperFirst %>Service;
    });

    it('should be able to create a new <%= props.nameCamelCaseUpperFirst %> Movement', async () => {
        const tenantid = uuid();
        const sut = new <%= props.nameCamelCaseUpperFirst %>Builder()<% if (props.tenantid) { %>
            .withTenantId(uuid())<% }%><% for(let i=0; i<props.properties.original.strings.length; i++) { %>
            .with<%= props.properties.camelCaseUpperFirst.strings[i] %>('<%= props.properties.original.strings[i] %>')<%}; %><% for(let i=0; i<props.properties.original.numbers.length; i++) { %>
            .with<%= props.properties.camelCaseUpperFirst.numbers[i] %>(123)<%}; %>
            .build();

        const userRequestData = {
            username: 'Teste',
            useremail: 'teste@teste.com.br',
        };

        const expectedRes = {
            ...sut,
            tenantid,
            created_by_name: userRequestData.username,
            created_by_email: userRequestData.useremail,
            updated_by_name: userRequestData.username,
            updated_by_email: userRequestData.useremail,
        };

        const {
            id,
            created_at,
            updated_at,
            active,
            ...entityProps
        } = await <%= props.nameCamelCase %>Service.create(sut, userRequestData, tenantid);

        expect(entityProps).toEqual(expectedRes);
        expect(id).not.toBeUndefined();
        expect(active).toBe(true);
        expect(created_at).not.toBeUndefined();
        expect(updated_at).not.toBeUndefined();
    });
});
