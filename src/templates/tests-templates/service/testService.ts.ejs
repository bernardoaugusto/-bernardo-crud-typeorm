import { uuid } from 'uuidv4';

import <%= props.nameCamelCaseUpperFirst %> from '../../database/entities/<%= props.nameCamelCaseUpperFirst %>';
import <%= props.nameCamelCaseUpperFirst %>Service from '../../services/<%= props.nameCamelCaseUpperFirst %>Service';
import <%= props.nameCamelCaseUpperFirst %>Builder from '../testBuilders/<%= props.nameCamelCaseUpperFirst %>Builder';
import { make<%= props.nameCamelCaseUpperFirst %>Service } from './makeInstance/<%= props.nameCamelCase %>';
import { <%= props.nameCamelCaseUpperFirst %>Interface } from '../../interfaces/<%= props.nameCamelCase %>';

describe('<%= props.nameCamelCaseUpperFirst %> Service', () => {
    let <%= props.nameCamelCase %>Service: <%= props.nameCamelCaseUpperFirst %>Service;

    beforeAll(async () => {
        <%= props.nameCamelCase %>Service = make<%= props.nameCamelCaseUpperFirst %>Service;
    });

    const makeSut = (<%= props.nameCamelCase %>Data?: Partial<<%= props.nameCamelCaseUpperFirst %>Interface>): Promise<<%= props.nameCamelCaseUpperFirst %>> => {
        const <%= props.nameCamelCase %> = new <%= props.nameCamelCaseUpperFirst %>Builder()<% if (props.tenantid) { %>
            .withTenantId(uuid())<% }%><% for(let i=0; i<props.properties.original.strings.length; i++) { %>
            .with<%= props.properties.camelCaseUpperFirst.strings[i] %>('<%= props.properties.original.strings[i] %>')<%}; %><% for(let i=0; i<props.properties.original.numbers.length; i++) { %>
            .with<%= props.properties.camelCaseUpperFirst.numbers[i] %>(123)<%}; %>
            .build();

        const userRequestData = {
            username: 'Teste',
            useremail: 'teste@teste.com.br',
        };

        return <%= props.nameCamelCase %>Service.create(
            Object.assign(<%= props.nameCamelCase %>, <%= props.nameCamelCase %>Data),
            userRequestData,
            <% if (props.tenantid) { %><%= props.nameCamelCase %>.tenantid!,<% }%>
        );
    };

    it('should be able to create a new <%= props.nameCamelCaseUpperFirst %>', async () => {
        const sut = new <%= props.nameCamelCaseUpperFirst %>Builder()<% if (props.tenantid) { %>
            .withTenantId(uuid())<% }%><% for(let i=0; i<props.properties.original.strings.length; i++) { %>
            .with<%= props.properties.camelCaseUpperFirst.strings[i] %>('<%= props.properties.original.strings[i] %>')<%}; %><% for(let i=0; i<props.properties.original.numbers.length; i++) { %>
            .with<%= props.properties.camelCaseUpperFirst.numbers[i] %>(123)<%}; %>
            .build();

        const userRequestData = {
            username: 'Teste',
            useremail: 'teste@teste.com.br',
        };

        const expectedRes = {
            ...sut,
            <% if (props.tenantid) { %>tenantid: sut.tenantid,<% }%>
            created_by_name: userRequestData.username,
            created_by_email: userRequestData.useremail,
            updated_by_name: userRequestData.username,
            updated_by_email: userRequestData.useremail,
        };

        const {
            id,
            created_at,
            updated_at,
            active,
            ...entityProps
        } = await <%= props.nameCamelCase %>Service.create(sut, userRequestData<% if (props.tenantid) { %>, sut.tenantid!<% }%>);

        expect(entityProps).toEqual(expectedRes);
        expect(id).not.toBeUndefined();
        expect(active).toBe(true);
        expect(created_at).not.toBeUndefined();
        expect(updated_at).not.toBeUndefined();
    });

    it('Should be able to find a <%= props.nameCamelCaseUpperFirst %> by id', async () => {
        const sut = await makeSut();

        const <%= props.nameCamelCase %>Finded = await <%= props.nameCamelCase %>Service.findById(sut.id!, <% if (props.tenantid) { %>sut.tenantid,<% }%>);

        expect(<%= props.nameCamelCase %>Finded).toEqual(sut);
    });

    it('Shoud return a <%= props.nameCamelCaseUpperFirst %> list without paginated', async () => {
        const sut = await makeSut();

        const res = (await <%= props.nameCamelCase %>Service.getAll(
            {},
            false,
            false,
            <% if (props.tenantid) { %>sut.tenantid,<% }%>
        )) as <%= props.nameCamelCaseUpperFirst %>[];

        expect(res.findIndex(<%= props.nameCamelCase %> => <%= props.nameCamelCase %>.id === sut.id)).toBeGreaterThanOrEqual(0);
    });

    it('Shoud return a <%= props.nameCamelCaseUpperFirst %> List with paged', async () => {
        const sut = await makeSut();
        const { data } = (await <%= props.nameCamelCase %>Service.getAll(
            {},
            true,
            false,
            <% if (props.tenantid) { %>sut.tenantid,<% }%>
        )) as {
            data: <%= props.nameCamelCaseUpperFirst %>[];
            count: number;
        };

        expect(data.findIndex(<%= props.nameCamelCase %> => <%= props.nameCamelCase %>.id === sut.id)).toBeGreaterThanOrEqual(0);
    });

    it('Shoud return a update <%= props.nameCamelCaseUpperFirst %>', async () => {
        const sut = await makeSut();

        const updates: <%= props.nameCamelCaseUpperFirst %>Interface = {
            active: false,<% for(let i=0; i<props.properties.original.strings.length; i++) { %>
            <%= props.properties.original.strings[i] %>: 'update <%= props.properties.original.strings[i] %>',<%}; %><% for(let i=0; i<props.properties.original.numbers.length; i++) { %>
            <%= props.properties.original.numbers[i] %>: 999,<%}; %>
        };

        const userRequestData = {
            username: 'Teste update',
            useremail: 'update@teste.com.br',
        };

        const expectedRes: <%= props.nameCamelCaseUpperFirst %>Interface = {
            ...updates,
            id: sut.id,
            tenantid: sut.tenantid,
            created_at: sut.created_at,
            created_by_name: sut.created_by_name,
            created_by_email: sut.created_by_email,
            updated_by_name: userRequestData.username,
            updated_by_email: userRequestData.useremail,
        };

        const { updated_at, ...entityProps } = await <%= props.nameCamelCase %>Service.update(
            sut.id,
            updates,
            userRequestData,
            sut.tenantid,
        );

        expect(entityProps).toEqual(expectedRes);
        expect(updated_at).not.toBeUndefined();
    });

    it('should update a <%= props.nameCamelCaseUpperFirst %> to active', async () => {
        const sut = await makeSut();

        let userRequestData = {
            username: 'Teste update',
            useremail: 'update@teste.com.br',
        };

        await userService.update(
            sut.id,
            <any>{ active: false, inactivation_date: new Date() },
            userRequestData,
            sut.tenantid,
        );

        userRequestData = {
            username: 'Teste activation',
            useremail: 'activation@teste.com.br',
        };

        const expectedRes = {
            active: true,
            id: sut.id,
            inactivation_date: null,
            tenantid: sut.tenantid,
            updated_by_name: 'Teste activation',
            updated_by_email: 'activation@teste.com.br',
        };

        const { updated_at, ...entityProps } = await <%= props.nameCamelCase %>Service.activation(
            userRequestData,
            sut.id,
            sut.tenantid,
        );

        expect(entityProps).toEqual(expectedRes);
        expect(updated_at).not.toBeUndefined();
    });

    it('should update a <%= props.nameCamelCaseUpperFirst %> to inactivation', async () => {
        const sut = await makeSut();

        const userRequestData = {
            username: 'Teste inactivation',
            useremail: 'inactivation@teste.com.br',
        };

        const expectedRes = {
            active: false,
            id: sut.id,
            tenantid: sut.tenantid,
            updated_by_name: 'Teste inactivation',
            updated_by_email: 'inactivation@teste.com.br',
        };

        const {
            updated_at,
            inactivation_date,
            ...entityProps
        } = await <%= props.nameCamelCase %>Service.inactivation(userRequestData, sut.id, sut.tenantid);

        expect(entityProps).toEqual(expectedRes);
        expect(updated_at).not.toBeUndefined();
        expect(inactivation_date).not.toBeUndefined();
    });
});
