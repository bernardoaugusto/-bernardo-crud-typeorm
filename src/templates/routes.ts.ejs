import { Router } from 'express';
import { celebrate, Segments } from 'celebrate';

import configValidateRoute from '../../../../../config/route';
import <%= props.nameCamelCaseUpperFirst %>Controller from '../controllers/<%= props.nameCamelCaseUpperFirst %>Controller';
import { create<%= props.nameCamelCaseUpperFirst %>Schema } from '../../../common/validations/create<%= props.nameCamelCaseUpperFirst %>Validator';
import { update<%= props.nameCamelCaseUpperFirst %>Schema } from '../../../common/validations/update<%= props.nameCamelCaseUpperFirst %>Validator';
import validateIdSchema from '../../../../../shared/common/validations/validateId';

const router = Router();
const <%= props.nameCamelCase %>Controller = new <%= props.nameCamelCaseUpperFirst %>Controller();

router.post(
    '/',
    celebrate(
        {
            [Segments.BODY]: create<%= props.nameCamelCaseUpperFirst %>Schema,
        },
        configValidateRoute,
    ),
    <%= props.nameCamelCase %>Controller.create,
);

router.get(
    '/:id',
    celebrate(
        {
            [Segments.PARAMS]: validateIdSchema,
        },
        configValidateRoute,
    ),
    <%= props.nameCamelCase %>Controller.getById,
);

router.get('/', <%= props.nameCamelCase %>Controller.getAll);

router.put(
    '/:id',
    celebrate(
        {
            [Segments.BODY]: update<%= props.nameCamelCaseUpperFirst %>Schema,
            [Segments.PARAMS]: validateIdSchema,
        },
        configValidateRoute,
    ),
    <%= props.nameCamelCase %>Controller.update,
);

router.delete(
    '/:id',
    celebrate(
        {
            [Segments.PARAMS]: validateIdSchema,
        },
        configValidateRoute,
    ),
    <%= props.nameCamelCase %>Controller.remove,
);

export default router;
