import { Request, Response } from 'express';
import { container } from 'tsyringe';
import { classToClass } from 'class-transformer';

import Create<%= props.nameCamelCaseUpperFirst %>Service from '../../services/Create<%= props.nameCamelCaseUpperFirst %>Service';
import GetById<%= props.nameCamelCaseUpperFirst %>Service from '../../services/GetById<%= props.nameCamelCaseUpperFirst %>Service';
import GetAll<%= props.nameCamelCaseUpperFirst %>Service from '../../services/GetAll<%= props.nameCamelCaseUpperFirst %>Service';
import Update<%= props.nameCamelCaseUpperFirst %>Service from '../../services/Update<%= props.nameCamelCaseUpperFirst %>Service';
import Remove<%= props.nameCamelCaseUpperFirst %>Service from '../../services/Remove<%= props.nameCamelCaseUpperFirst %>Service';

export default class <%= props.nameCamelCaseUpperFirst %>Controller {
    public async create(request: Request, response: Response): Promise<Response> {
        const <%= props.nameCamelCase %> = request.body;

        const create<%= props.nameCamelCaseUpperFirst %>Service = container.resolve(Create<%= props.nameCamelCaseUpperFirst %>Service);

        const <%= props.nameCamelCase %>Created = await create<%= props.nameCamelCaseUpperFirst %>Service.execute(<%= props.nameCamelCase %>);

        return response.status(201).json(classToClass(<%= props.nameCamelCase %>Created));
    }

    public async getById(request: Request, response: Response): Promise<Response> {
        const <%= props.nameCamelCase %>Id = request.params.id;

        const getById<%= props.nameCamelCaseUpperFirst %>Service = container.resolve(GetById<%= props.nameCamelCaseUpperFirst %>Service);

        const <%= props.nameCamelCase %> = await getById<%= props.nameCamelCaseUpperFirst %>Service.execute(<%= props.nameCamelCase %>Id);

        return response.status(200).json(classToClass(<%= props.nameCamelCase %>));
    }

    public async getAll(request: Request, response: Response): Promise<Response> {
        const { query } = request;
        const withPagination = JSON.parse(query.withPagination || 'true');

        const getAll<%= props.nameCamelCaseUpperFirst %>Service = container.resolve(GetAll<%= props.nameCamelCaseUpperFirst %>Service);
        const <%= props.nameCamelCase %> = await getAll<%= props.nameCamelCaseUpperFirst %>Service.execute(query, withPagination);

        return response.status(200).json(classToClass(<%= props.nameCamelCase %>));
    }

    public async update(request: Request, response: Response): Promise<Response> {
        const updates = request.body;
        const <%= props.nameCamelCase %>Id = request.params.id;

        const update<%= props.nameCamelCaseUpperFirst %>Service = container.resolve(Update<%= props.nameCamelCaseUpperFirst %>Service);

        const <%= props.nameCamelCase %>Updated = await update<%= props.nameCamelCaseUpperFirst %>Service.execute(updates, <%= props.nameCamelCase %>Id);

        return response.status(200).json(classToClass(<%= props.nameCamelCase %>Updated));
    }

    public async remove(request: Request, response: Response): Promise<Response> {
        const <%= props.nameCamelCase %>Id = request.params.id;

        const remove<%= props.nameCamelCaseUpperFirst %>Service = container.resolve(Remove<%= props.nameCamelCaseUpperFirst %>Service);

        await remove<%= props.nameCamelCaseUpperFirst %>Service.execute(<%= props.nameCamelCase %>Id);

        return response.status(204).json();
    }
}
