import { inject, injectable } from 'tsyringe';
import AppError from '../../../shared/errors/AppError';

import <%= props.nameCamelCaseUpperFirst %> from '../infra/http/typeorm/entities/<%= props.nameCamelCaseUpperFirst %>';
import I<%= props.nameCamelCaseUpperFirst %>RepositoryDTO from '../repositories/I<%= props.nameCamelCaseUpperFirst %>RepositoryDTO';

@injectable()
export default class GetById<%= props.nameCamelCaseUpperFirst %>Service {
    constructor(
        @inject('<%= props.nameCamelCaseUpperFirst %>Repository')
        private <%= props.nameCamelCase %>Repository: I<%= props.nameCamelCaseUpperFirst %>RepositoryDTO,
    ) {}

    public async execute(id: string<% if (props.tenantid) { %>, tenantid: string<% }%>): Promise<<%= props.nameCamelCaseUpperFirst %>> {
        const finded<%= props.nameCamelCaseUpperFirst %> = await this.<%= props.nameCamelCase %>Repository.findById(id<% if (props.tenantid) { %>, tenantid<% }%>);

        if (!finded<%= props.nameCamelCaseUpperFirst %>) throw new AppError('<%= props.nameCamelCaseUpperFirst %> not found', 404);

        return finded<%= props.nameCamelCaseUpperFirst %>;
    }
}
