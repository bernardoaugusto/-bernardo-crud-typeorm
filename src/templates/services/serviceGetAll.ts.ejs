import { inject, injectable } from 'tsyringe';
import {
    formatParamsToTypeOrmOptionsWithPaginate,
    formatParamsToTypeOrmOptionsWithoutPaginate,
    formatPaginateDataToResponse,
} from '@seidor-cloud-produtos/typeorm';

import <%= props.nameCamelCaseUpperFirst %> from '../infra/typeorm/entities/<%= props.nameCamelCaseUpperFirst %>';
import I<%= props.nameCamelCaseUpperFirst %>RequestGetAllDTO from '../dtos/I<%= props.nameCamelCaseUpperFirst %>RequestGetAllDTO';
import I<%= props.nameCamelCaseUpperFirst %>RepositoryDTO from '../repositories/I<%= props.nameCamelCaseUpperFirst %>RepositoryDTO';

@injectable()
export default class GetAll<%= props.nameCamelCaseUpperFirst %>Service {
    constructor(
        @inject('<%= props.nameCamelCaseUpperFirst %>Repository')
        private <%= props.nameCamelCase %>Repository: I<%= props.nameCamelCaseUpperFirst %>RepositoryDTO,
    ) {}

    public async execute(
        queryParams: I<%= props.nameCamelCaseUpperFirst %>RequestGetAllDTO,
        withPagination: boolean,
    ): Promise<
        | <%= props.nameCamelCaseUpperFirst %>[]
        | ({
              data: <%= props.nameCamelCaseUpperFirst %>[];
          } & {
              count: number;
              limit: number;
              page: number;
              totalPages: number;
          })
    > {
        if (withPagination) {
            const options = formatParamsToTypeOrmOptionsWithPaginate(
                queryParams,
                true,
            );

            const array<%= props.nameCamelCaseUpperFirst %> = await this.<%= props.nameCamelCase %>Repository.getAllWithPagination(
                options,
            );

            return formatPaginateDataToResponse(queryParams, array<%= props.nameCamelCaseUpperFirst %>);
        }

        const options = formatParamsToTypeOrmOptionsWithoutPaginate(
            queryParams,
            true,
        );

        return this.<%= props.nameCamelCase %>Repository.getAllWithoutPagination(options);
    }
}
