import { inject, injectable } from 'tsyringe';

import <%= props.nameCamelCaseUpperFirst %> from '../infra/http/typeorm/entities/<%= props.nameCamelCaseUpperFirst %>';
import I<%= props.nameCamelCaseUpperFirst %>UpdateDTO from '../dtos/I<%= props.nameCamelCaseUpperFirst %>UpdateDTO';
import I<%= props.nameCamelCaseUpperFirst %>RepositoryDTO from '../repositories/I<%= props.nameCamelCaseUpperFirst %>RepositoryDTO';
import GetById<%= props.nameCamelCaseUpperFirst %>Service from './GetById<%= props.nameCamelCaseUpperFirst %>Service';

@injectable()
export default class Update<%= props.nameCamelCaseUpperFirst %>Service {
    constructor(
        @inject('<%= props.nameCamelCaseUpperFirst %>Repository')
        private <%= props.nameCamelCase %>Repository: I<%= props.nameCamelCaseUpperFirst %>RepositoryDTO,

        @inject('GetById<%= props.nameCamelCaseUpperFirst %>Service')
        private getById<%= props.nameCamelCaseUpperFirst %>Service: GetById<%= props.nameCamelCaseUpperFirst %>Service,
    ) {}

    public async execute(
        <%= props.nameCamelCase %>DataUpdates: I<%= props.nameCamelCaseUpperFirst %>UpdateDTO,
        <%= props.nameCamelCase %>Id: string,
    ): Promise<<%= props.nameCamelCaseUpperFirst %>> {
        const <%= props.nameCamelCase %> = await this.getById<%= props.nameCamelCaseUpperFirst %>Service.execute(<%= props.nameCamelCase %>Id);

        Object.assign(<%= props.nameCamelCase %>, <%= props.nameCamelCase %>DataUpdates);

        return this.<%= props.nameCamelCase %>Repository.update(<%= props.nameCamelCase %>);
    }
}
