import { typeorm } from '@seidor-cloud-produtos/lib-seidor-common';

<% if (props.architecture === 'clean-architecture') { %>import <%= props.nameCamelCaseUpperFirst %> from '../entities/<%= props.nameCamelCaseUpperFirst %>';<% } else{ %>import <%= props.nameCamelCaseUpperFirst %> from '../../database/entities/<%= props.nameCamelCaseUpperFirst %>';<% } %>
<% if (props.architecture === 'clean-architecture') { %>import { <%= props.nameCamelCaseUpperFirst %>Interface } from '../../../../dtos/I<%= props.nameCamelCaseUpperFirst %>DTO';<% } else{ %>import { <%= props.nameCamelCaseUpperFirst %>Interface } from '../<%= props.nameCamelCase %>';<% } %>
export default interface I<%= props.nameCamelCaseUpperFirst %>Repository {
    createAndSave(
        <%= props.nameCamelCase %>Data: <%= props.nameCamelCaseUpperFirst %>Interface,
    ): Promise<<%= props.nameCamelCaseUpperFirst %>>;
    findById(id: string<% if (props.tenantid) { %>, tenantid: string<% }%>): Promise<<%= props.nameCamelCaseUpperFirst %> | undefined>;
    getAllWithPagination(
        options: typeorm.OptionsTypeOrmGetAllWithPagination,
    ): Promise<{ data: <%= props.nameCamelCaseUpperFirst %>[]; count: number }>;
    getAllWithoutPagination(options: typeorm.OptionsTypeOrmGetAllWithoutPagination): Promise<<%= props.nameCamelCaseUpperFirst %>[]>;
}

