






    it('should be able to call controller inactive with <%= props.nameCamelCase %> id and tenantid and return 204', async () => {
        const <%= props.nameCamelCase %>_id = uuid();
        const tenantid = uuid();

        const userData = {
            username: 'Teste',
            useremail: 'teste@teste.com.br',
        };

        <%= props.nameCamelCase %>ServiceSpy.inactivation.resolves();
        sinon.stub(container, 'resolve').returns(<%= props.nameCamelCase %>ServiceSpy);

        const response = await request(app)
            .post(`/api/<%= props.tableName %>/inactivation/${<%= props.nameCamelCase %>_id}`)
            .set({ username: 'Teste', useremail: 'teste@teste.com.br', tenantid });

        expect(response.status).toBe(204);
        expect(response.body).toStrictEqual({});

        expect(
            <%= props.nameCamelCase %>ServiceSpy.inactivation.calledWithExactly({
                <%= props.nameCamelCase %>_id,
                tenantid,
                userData,
            }),
        ).toBeTruthy();
    });

    it('should be able to call controller remove return 400 when not send params', async () => {
        const <%= props.nameCamelCase %>_id = uuid();

        <%= props.nameCamelCase %>ServiceSpy.inactivation.resolves();
        sinon.stub(container, 'resolve').returns(<%= props.nameCamelCase %>ServiceSpy);

        const response = await request(app).post(`/api/<%= props.tableName %>/inactivation/${<%= props.nameCamelCase %>_id}`);

        expect(response.status).toBe(400);
        expect(<%= props.nameCamelCase %>ServiceSpy.update.notCalled).toBeTruthy();

        expect(
            isParamsInValidationErrors(
                ['tenantid', 'username', 'useremail'],
                response.body.errors,
            ),
        ).toBeTruthy();
    });
